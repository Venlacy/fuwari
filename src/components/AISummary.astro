---
import { Icon } from "astro-icon/components";
import { aiSummaryConfig } from "../config";

interface Props {
    content: string;
    title: string;
}

const { content, title } = Astro.props;
---

{aiSummaryConfig.enable && (
    <div class="ai-summary-container onload-animation mb-6">
        <div class="card-base rounded-xl p-6">
            <div class="flex items-center gap-3 mb-4">
                <div class="h-8 w-8 rounded-lg bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center">
                    <Icon name="material-symbols:lightbulb-outline" class="text-white text-xl" />
                </div>
                <h3 class="text-lg font-bold text-black/90 dark:text-white/90">AI 总结</h3>
                <button 
                    id="generate-summary-btn" 
                    class="ml-auto px-4 py-2 rounded-lg bg-[var(--primary)] text-white font-medium hover:opacity-90 transition-all active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    生成总结
                </button>
            </div>
            <div id="summary-content" class="hidden">
                <div class="prose prose-sm dark:prose-invert max-w-none">
                    <div id="summary-text" class="text-black/75 dark:text-white/75"></div>
                </div>
            </div>
            <div id="summary-loading" class="hidden">
                <div class="flex items-center gap-3 text-black/50 dark:text-white/50">
                    <div class="animate-spin h-5 w-5 border-2 border-[var(--primary)] border-t-transparent rounded-full"></div>
                    <span>正在生成总结...</span>
                </div>
            </div>
            <div id="summary-error" class="hidden text-red-500"></div>
        </div>
    </div>
)}

<script define:vars={{ aiSummaryConfig, content, title }}>
    const generateBtn = document.getElementById('generate-summary-btn');
    const summaryContent = document.getElementById('summary-content');
    const summaryText = document.getElementById('summary-text');
    const summaryLoading = document.getElementById('summary-loading');
    const summaryError = document.getElementById('summary-error');

    if (generateBtn && aiSummaryConfig.enable) {
        generateBtn.addEventListener('click', async () => {
            generateBtn.disabled = true;
            summaryContent.classList.add('hidden');
            summaryError.classList.add('hidden');
            summaryLoading.classList.remove('hidden');

            try {
                const response = await fetch(`${aiSummaryConfig.apiUrl}/chat/completions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${aiSummaryConfig.apiKey}`
                    },
                    body: JSON.stringify({
                        model: aiSummaryConfig.model,
                        messages: [
                            {
                                role: 'system',
                                content: '你是一个专业的文章总结助手。请用简洁清晰的中文总结文章的核心内容，包括主要观点和关键信息。总结应该在200-300字之间。'
                            },
                            {
                                role: 'user',
                                content: `请总结以下文章：\n\n标题：${title}\n\n内容：${content.substring(0, 4000)}`
                            }
                        ],
                        stream: false,
                        temperature: 0.7
                    })
                });

                if (!response.ok) {
                    throw new Error(`API请求失败: ${response.status}`);
                }

                const data = await response.json();
                const summary = data.choices?.[0]?.message?.content || '无法生成总结';

                summaryText.textContent = summary;
                summaryLoading.classList.add('hidden');
                summaryContent.classList.remove('hidden');
                generateBtn.textContent = '重新生成';
            } catch (error) {
                console.error('生成AI总结失败:', error);
                summaryLoading.classList.add('hidden');
                summaryError.textContent = '生成总结失败，请稍后重试';
                summaryError.classList.remove('hidden');
                generateBtn.disabled = false;
            }
        });
    }
</script>

<style>
    .ai-summary-container {
        animation: fadeIn 0.5s ease-in-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #summary-text {
        line-height: 1.8;
        white-space: pre-wrap;
        word-wrap: break-word;
    }
</style>